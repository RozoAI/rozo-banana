"use client";

import { BottomNavigation } from "@/components/BottomNavigation";
import { HeaderLogo } from "@/components/HeaderLogo";
import { ShareButton } from "@/components/ShareButton";
import { TwitterShareButton } from "@/components/TwitterShareButton";
import { WalletConnectButton } from "@/components/WalletConnectButton";
import { useIsMobile } from "@/hooks/useIsMobile";
import { imageAPI } from "@/lib/api";
import { Eye } from "lucide-react";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { useAccount } from "wagmi";

interface GeneratedImage {
  id: string;
  image_url?: string;
  url?: string;
  thumbnail?: string;
  file_name?: string;
  prompt: string;
  created_at: string;
}

export default function GalleryPage() {
  const { address, isConnected } = useAccount();
  const [images, setImages] = useState<GeneratedImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const isMobile = useIsMobile();
  const router = useRouter();

  // Fetch public gallery
  useEffect(() => {
    fetchGallery();
  }, []);

  // Removed auto sign-in - authentication will happen when needed
  // useEffect(() => {
  //   if (address && !isAuthenticated && !isLoading) {
  //     signIn();
  //   }
  // }, [address, isAuthenticated, isLoading, signIn]);

  const fetchGallery = async () => {
    setLoading(true);
    setError(null);

    try {
      // Always fetch public gallery
      console.log("üåç [Gallery] Fetching public gallery");
      const response = await imageAPI.getPublicGallery(1, 100, "newest");

      // Handle the response structure for public gallery
      if (response.images) {
        setImages(
          response.images.map((image: any) => {
            const imageUrl = image.thumbnail || image.url || image.image_url;

            return {
              id: image.id,
              image_url: imageUrl,
              url: image.thumbnail || image.url || image.image_url,
              thumbnail: image.thumbnail || image.url || image.image_url,
              prompt: image.prompt || "Generated image",
              created_at: image.created_at || new Date().toISOString(),
              file_name: imageUrl.replace(
                "https://eslabobvkchgpokxszwv.supabase.co/storage/v1/object/public/generated-images/rozobanana/",
                ""
              ),
            };
          })
        );
      } else if (Array.isArray(response)) {
        setImages(response);
      } else {
        setImages([]);
      }

      console.log("üåå [Gallery] API response:", response);
    } catch (err) {
      console.error("Failed to fetch gallery:", err);
      setError("Failed to load image gallery");
    } finally {
      setLoading(false);
    }
  };

  // if (!isConnected) {
  //   return (
  //     <div className="min-h-screen bg-[rgb(17,17,17)]">
  //       <header className="sticky top-0 w-full bg-[rgb(17,17,17)]/90 backdrop-blur-md border-b border-gray-800 z-50">
  //         <div className="max-w-lg mx-auto px-4 py-4">
  //           <div className="flex justify-between items-center">
  //             <div className="flex items-center space-x-2">
  //               <span className="text-3xl">üçå</span>
  //               <span className="font-bold text-xl text-white">ROZO Banana</span>
  //             </div>
  //             <WalletConnectButton />
  //           </div>
  //         </div>
  //       </header>
  //       <div className="flex flex-col items-center justify-center min-h-[calc(100vh-5rem)] py-8">
  //         <div className="text-center space-y-8 w-full max-w-lg mx-auto px-4">
  //           <span className="text-6xl block">üñºÔ∏è</span>
  //           <h1 className="text-3xl font-bold text-gray-900">Gallery</h1>
  //           <p className="text-gray-600">List of images generated by Rozo OG</p>
  //         </div>
  //       </div>
  //     </div>
  //   );
  // }

  // Remove authentication requirement - gallery can be viewed with just wallet connection
  // Authentication will only be required when generating images

  return (
    <div className="min-h-screen bg-[rgb(17,17,17)]">
      <header className="sticky top-0 w-full bg-[rgb(17,17,17)]/90 backdrop-blur-md border-b border-gray-800 z-50">
        <div className="max-w-lg mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <HeaderLogo />
            <WalletConnectButton />
          </div>
        </div>
      </header>

      <main className="max-w-lg mx-auto px-4 pb-20">
        <div className="py-6">
          <div className="bg-[rgb(17,17,17)] rounded-2xl p-6 shadow-sm border border-gray-800">
            <h3 className="font-bold text-lg mb-4 text-white">
              Public Gallery
            </h3>
            {loading ? (
              <div className="flex flex-col items-center justify-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[rgb(245,210,60)]"></div>
                <p className="text-gray-400 mt-4">Loading images...</p>
              </div>
            ) : error ? (
              <div className="text-center py-12">
                <p className="text-red-400 mb-4">{error}</p>
                <button
                  onClick={fetchGallery}
                  className="px-4 py-2 bg-[rgb(245,210,60)] text-black rounded-lg hover:bg-[rgb(255,220,70)] transition-colors"
                >
                  Try Again
                </button>
              </div>
            ) : images.length > 0 ? (
              <div className="grid grid-cols-2 gap-3">
                {images.map((image, index) => (
                  <div
                    key={image.id || index}
                    className="relative aspect-square rounded-lg overflow-hidden bg-gray-800"
                  >
                    <img
                      src={image.thumbnail || image.image_url || image.url}
                      alt={image.prompt || `Generated image ${index + 1}`}
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />

                    {/* Always visible overlay for mobile-friendly experience */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent">
                      {/* Top action buttons */}
                      <div className="absolute top-2 right-2 flex gap-2">
                        <button
                          onClick={() =>
                            router.push(`/share/${image.file_name}`)
                          }
                          className="bg-white/90 hover:bg-white text-gray-700 rounded-full p-1.5 shadow-sm transition-colors"
                          title="View details"
                        >
                          <Eye className="size-4" />
                        </button>
                      </div>

                      {/* Bottom content */}
                      <div className="absolute bottom-0 left-0 right-0 p-2">
                        {/* {image.prompt && (
                          <p className="text-white text-xs line-clamp-2 mb-2">
                            {image.prompt}
                          </p>
                        )} */}
                        <div className="flex gap-2">
                          {isMobile ? (
                            <ShareButton
                              imageUrl={
                                image.thumbnail || image.image_url || image.url
                              }
                              prompt={image.prompt}
                              shareId={image.id}
                              className="text-xs px-3 py-1.5 bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30 flex-1"
                            >
                              Share
                            </ShareButton>
                          ) : (
                            <TwitterShareButton
                              imageUrl={
                                image.thumbnail || image.image_url || image.url
                              }
                              prompt={image.prompt}
                              shareId={image.id}
                              className="text-xs px-3 py-1.5 bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30 flex-1"
                            >
                              Share
                            </TwitterShareButton>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-12">
                <span className="text-4xl mb-3">üñºÔ∏è</span>
                <p className="text-gray-400">No public images available</p>
                <p className="text-sm text-gray-500 mt-1">
                  Public images will appear here
                </p>
              </div>
            )}
          </div>
        </div>
      </main>

      <BottomNavigation />
    </div>
  );
}
